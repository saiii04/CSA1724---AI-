import math

# Function to evaluate the current board state
def evaluate(board):
    # Check rows
    for row in board:
        if all(cell == 'X' for cell in row):
            return 1
        elif all(cell == 'O' for cell in row):
            return -1

    # Check columns
    for col in range(3):
        if all(board[row][col] == 'X' for row in range(3)):
            return 1
        elif all(board[row][col] == 'O' for row in range(3)):
            return -1

    # Check diagonals
    if all(board[i][i] == 'X' for i in range(3)):
        return 1
    elif all(board[i][2-i] == 'X' for i in range(3)):
        return 1
    elif all(board[i][i] == 'O' for i in range(3)):
        return -1
    elif all(board[i][2-i] == 'O' for i in range(3)):
        return -1

    return 0  # Draw or game not over

# Minimax function
def minimax(board, depth, isMaximizing):
    score = evaluate(board)

    if score != 0:
        return score

    if depth == 0 or ' ' not in [cell for row in board for cell in row]:
        return 0

    if isMaximizing:
        bestScore = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    score = minimax(board, depth - 1, False)
                    board[i][j] = ' '
                    bestScore = max(score, bestScore)
        return bestScore
    else:
        bestScore = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    score = minimax(board, depth - 1, True)
                    board[i][j] = ' '
                    bestScore = min(score, bestScore)
        return bestScore

# Function to find the best move using minimax algorithm
def findBestMove(board):
    bestScore = -math.inf
    bestMove = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                score = minimax(board, 5, False)  # Depth can be adjusted
                board[i][j] = ' '
                if score > bestScore:
                    bestScore = score
                    bestMove = (i, j)

    return bestMove

# Example usage:
board = [[' ', ' ', ' '],
         [' ', ' ', ' '],
         [' ', ' ', ' ']]

print("Initial Board:")
for row in board:
    print(row)

bestMove = findBestMove(board)
print("\nBest Move for 'X' at position:", bestMove)
